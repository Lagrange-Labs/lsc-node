// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package committee

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ILagrangeCommitteeCommitteeData is an auto generated low-level Go binding around an user-defined struct.
type ILagrangeCommitteeCommitteeData struct {
	Root         [32]byte
	UpdatedBlock *big.Int
	LeafCount    uint32
}

// CommitteeMetaData contains all meta data concerning the Committee contract.
var CommitteeMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_service\",\"type\":\"address\",\"internalType\":\"contractILagrangeService\"},{\"name\":\"_voteWeigher\",\"type\":\"address\",\"internalType\":\"contractIVoteWeigher\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"INNER_NODE_PREFIX\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"LEAF_NODE_PREFIX\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addBlsPubKeys\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"additionalBlsPubKeys\",\"type\":\"uint256[2][]\",\"internalType\":\"uint256[2][]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"addOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"signAddress\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"blsPubKeys\",\"type\":\"uint256[2][]\",\"internalType\":\"uint256[2][]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"chainIDs\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"committeeAddrs\",\"inputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"committeeParams\",\"inputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"startBlock\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"l1Bias\",\"type\":\"int256\",\"internalType\":\"int256\"},{\"name\":\"genesisBlock\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"freezeDuration\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"minWeight\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"maxWeight\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"committees\",\"inputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"root\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"updatedBlock\",\"type\":\"uint224\",\"internalType\":\"uint224\"},{\"name\":\"leafCount\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBlsPubKeyVotingPowers\",\"inputs\":[{\"name\":\"opAddr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"chainID\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"individualVotingPowers\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBlsPubKeys\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2][]\",\"internalType\":\"uint256[2][]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCommittee\",\"inputs\":[{\"name\":\"chainID\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"blockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"currentCommittee\",\"type\":\"tuple\",\"internalType\":\"structILagrangeCommittee.CommitteeData\",\"components\":[{\"name\":\"root\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"updatedBlock\",\"type\":\"uint224\",\"internalType\":\"uint224\"},{\"name\":\"leafCount\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getEpochInterval\",\"inputs\":[{\"name\":\"chainID\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"epochNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"startBlock\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"freezeBlock\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"endBlock\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getEpochNumber\",\"inputs\":[{\"name\":\"chainID\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"blockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"epochNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorVotingPower\",\"inputs\":[{\"name\":\"opAddr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"chainID\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTokenListForOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"initialOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isLocked\",\"inputs\":[{\"name\":\"chainID\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isUnregisterable\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isUpdatable\",\"inputs\":[{\"name\":\"chainID\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"epochNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"operatorsStatus\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"signAddress\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"subscribedChainCount\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerChain\",\"inputs\":[{\"name\":\"chainID\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"genesisBlock\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"epochPeriod\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"freezeDuration\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"minWeight\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"maxWeight\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeBlsPubKeys\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"indices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revertEpoch\",\"inputs\":[{\"name\":\"chainID\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"epochNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"service\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractILagrangeService\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"subscribeChain\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"chainID\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"subscribedChains\",\"inputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unsubscribeByAdmin\",\"inputs\":[{\"name\":\"operators\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"chainID\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unsubscribeChain\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"chainID\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"update\",\"inputs\":[{\"name\":\"chainID\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"epochNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateBlsPubKey\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"index\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"blsPubKey\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateChain\",\"inputs\":[{\"name\":\"chainID\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"l1Bias\",\"type\":\"int256\",\"internalType\":\"int256\"},{\"name\":\"genesisBlock\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"epochPeriod\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"freezeDuration\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"minWeight\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"maxWeight\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateSignAddress\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"newSignAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updatedEpoch\",\"inputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"voteWeigher\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIVoteWeigher\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"InitCommittee\",\"inputs\":[{\"name\":\"chainID\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"genesisBlock\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"freezeDuration\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"minWeight\",\"type\":\"uint96\",\"indexed\":false,\"internalType\":\"uint96\"},{\"name\":\"maxWeight\",\"type\":\"uint96\",\"indexed\":false,\"internalType\":\"uint96\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SignAddressUpdated\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"signAddress\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"UpdateCommittee\",\"inputs\":[{\"name\":\"chainID\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"epochNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"current\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"UpdateCommitteeParams\",\"inputs\":[{\"name\":\"chainID\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"l1Bias\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"},{\"name\":\"genesisBlock\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"freezeDuration\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"minWeight\",\"type\":\"uint96\",\"indexed\":false,\"internalType\":\"uint96\"},{\"name\":\"maxWeight\",\"type\":\"uint96\",\"indexed\":false,\"internalType\":\"uint96\"}],\"anonymous\":false}]",
	Bin: "",
}

// CommitteeABI is the input ABI used to generate the binding from.
// Deprecated: Use CommitteeMetaData.ABI instead.
var CommitteeABI = CommitteeMetaData.ABI

// CommitteeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CommitteeMetaData.Bin instead.
var CommitteeBin = CommitteeMetaData.Bin

// DeployCommittee deploys a new Ethereum contract, binding an instance of Committee to it.
func DeployCommittee(auth *bind.TransactOpts, backend bind.ContractBackend, _service common.Address, _voteWeigher common.Address) (common.Address, *types.Transaction, *Committee, error) {
	parsed, err := CommitteeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CommitteeBin), backend, _service, _voteWeigher)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Committee{CommitteeCaller: CommitteeCaller{contract: contract}, CommitteeTransactor: CommitteeTransactor{contract: contract}, CommitteeFilterer: CommitteeFilterer{contract: contract}}, nil
}

// Committee is an auto generated Go binding around an Ethereum contract.
type Committee struct {
	CommitteeCaller     // Read-only binding to the contract
	CommitteeTransactor // Write-only binding to the contract
	CommitteeFilterer   // Log filterer for contract events
}

// CommitteeCaller is an auto generated read-only Go binding around an Ethereum contract.
type CommitteeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CommitteeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CommitteeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CommitteeSession struct {
	Contract     *Committee        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CommitteeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CommitteeCallerSession struct {
	Contract *CommitteeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// CommitteeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CommitteeTransactorSession struct {
	Contract     *CommitteeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// CommitteeRaw is an auto generated low-level Go binding around an Ethereum contract.
type CommitteeRaw struct {
	Contract *Committee // Generic contract binding to access the raw methods on
}

// CommitteeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CommitteeCallerRaw struct {
	Contract *CommitteeCaller // Generic read-only contract binding to access the raw methods on
}

// CommitteeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CommitteeTransactorRaw struct {
	Contract *CommitteeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCommittee creates a new instance of Committee, bound to a specific deployed contract.
func NewCommittee(address common.Address, backend bind.ContractBackend) (*Committee, error) {
	contract, err := bindCommittee(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Committee{CommitteeCaller: CommitteeCaller{contract: contract}, CommitteeTransactor: CommitteeTransactor{contract: contract}, CommitteeFilterer: CommitteeFilterer{contract: contract}}, nil
}

// NewCommitteeCaller creates a new read-only instance of Committee, bound to a specific deployed contract.
func NewCommitteeCaller(address common.Address, caller bind.ContractCaller) (*CommitteeCaller, error) {
	contract, err := bindCommittee(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CommitteeCaller{contract: contract}, nil
}

// NewCommitteeTransactor creates a new write-only instance of Committee, bound to a specific deployed contract.
func NewCommitteeTransactor(address common.Address, transactor bind.ContractTransactor) (*CommitteeTransactor, error) {
	contract, err := bindCommittee(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CommitteeTransactor{contract: contract}, nil
}

// NewCommitteeFilterer creates a new log filterer instance of Committee, bound to a specific deployed contract.
func NewCommitteeFilterer(address common.Address, filterer bind.ContractFilterer) (*CommitteeFilterer, error) {
	contract, err := bindCommittee(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CommitteeFilterer{contract: contract}, nil
}

// bindCommittee binds a generic wrapper to an already deployed contract.
func bindCommittee(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CommitteeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Committee *CommitteeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Committee.Contract.CommitteeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Committee *CommitteeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Committee.Contract.CommitteeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Committee *CommitteeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Committee.Contract.CommitteeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Committee *CommitteeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Committee.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Committee *CommitteeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Committee.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Committee *CommitteeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Committee.Contract.contract.Transact(opts, method, params...)
}

// INNERNODEPREFIX is a free data retrieval call binding the contract method 0x727cb30f.
//
// Solidity: function INNER_NODE_PREFIX() view returns(bytes1)
func (_Committee *CommitteeCaller) INNERNODEPREFIX(opts *bind.CallOpts) ([1]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "INNER_NODE_PREFIX")

	if err != nil {
		return *new([1]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)

	return out0, err

}

// INNERNODEPREFIX is a free data retrieval call binding the contract method 0x727cb30f.
//
// Solidity: function INNER_NODE_PREFIX() view returns(bytes1)
func (_Committee *CommitteeSession) INNERNODEPREFIX() ([1]byte, error) {
	return _Committee.Contract.INNERNODEPREFIX(&_Committee.CallOpts)
}

// INNERNODEPREFIX is a free data retrieval call binding the contract method 0x727cb30f.
//
// Solidity: function INNER_NODE_PREFIX() view returns(bytes1)
func (_Committee *CommitteeCallerSession) INNERNODEPREFIX() ([1]byte, error) {
	return _Committee.Contract.INNERNODEPREFIX(&_Committee.CallOpts)
}

// LEAFNODEPREFIX is a free data retrieval call binding the contract method 0x38fa59d1.
//
// Solidity: function LEAF_NODE_PREFIX() view returns(bytes1)
func (_Committee *CommitteeCaller) LEAFNODEPREFIX(opts *bind.CallOpts) ([1]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "LEAF_NODE_PREFIX")

	if err != nil {
		return *new([1]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)

	return out0, err

}

// LEAFNODEPREFIX is a free data retrieval call binding the contract method 0x38fa59d1.
//
// Solidity: function LEAF_NODE_PREFIX() view returns(bytes1)
func (_Committee *CommitteeSession) LEAFNODEPREFIX() ([1]byte, error) {
	return _Committee.Contract.LEAFNODEPREFIX(&_Committee.CallOpts)
}

// LEAFNODEPREFIX is a free data retrieval call binding the contract method 0x38fa59d1.
//
// Solidity: function LEAF_NODE_PREFIX() view returns(bytes1)
func (_Committee *CommitteeCallerSession) LEAFNODEPREFIX() ([1]byte, error) {
	return _Committee.Contract.LEAFNODEPREFIX(&_Committee.CallOpts)
}

// ChainIDs is a free data retrieval call binding the contract method 0x09d23e24.
//
// Solidity: function chainIDs(uint256 ) view returns(uint32)
func (_Committee *CommitteeCaller) ChainIDs(opts *bind.CallOpts, arg0 *big.Int) (uint32, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "chainIDs", arg0)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ChainIDs is a free data retrieval call binding the contract method 0x09d23e24.
//
// Solidity: function chainIDs(uint256 ) view returns(uint32)
func (_Committee *CommitteeSession) ChainIDs(arg0 *big.Int) (uint32, error) {
	return _Committee.Contract.ChainIDs(&_Committee.CallOpts, arg0)
}

// ChainIDs is a free data retrieval call binding the contract method 0x09d23e24.
//
// Solidity: function chainIDs(uint256 ) view returns(uint32)
func (_Committee *CommitteeCallerSession) ChainIDs(arg0 *big.Int) (uint32, error) {
	return _Committee.Contract.ChainIDs(&_Committee.CallOpts, arg0)
}

// CommitteeAddrs is a free data retrieval call binding the contract method 0xbf988ab6.
//
// Solidity: function committeeAddrs(uint32 , uint256 ) view returns(address)
func (_Committee *CommitteeCaller) CommitteeAddrs(opts *bind.CallOpts, arg0 uint32, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "committeeAddrs", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CommitteeAddrs is a free data retrieval call binding the contract method 0xbf988ab6.
//
// Solidity: function committeeAddrs(uint32 , uint256 ) view returns(address)
func (_Committee *CommitteeSession) CommitteeAddrs(arg0 uint32, arg1 *big.Int) (common.Address, error) {
	return _Committee.Contract.CommitteeAddrs(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeAddrs is a free data retrieval call binding the contract method 0xbf988ab6.
//
// Solidity: function committeeAddrs(uint32 , uint256 ) view returns(address)
func (_Committee *CommitteeCallerSession) CommitteeAddrs(arg0 uint32, arg1 *big.Int) (common.Address, error) {
	return _Committee.Contract.CommitteeAddrs(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeParams is a free data retrieval call binding the contract method 0x72856455.
//
// Solidity: function committeeParams(uint32 ) view returns(uint256 startBlock, int256 l1Bias, uint256 genesisBlock, uint256 duration, uint256 freezeDuration, uint8 quorumNumber, uint96 minWeight, uint96 maxWeight)
func (_Committee *CommitteeCaller) CommitteeParams(opts *bind.CallOpts, arg0 uint32) (struct {
	StartBlock     *big.Int
	L1Bias         *big.Int
	GenesisBlock   *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
	QuorumNumber   uint8
	MinWeight      *big.Int
	MaxWeight      *big.Int
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "committeeParams", arg0)

	outstruct := new(struct {
		StartBlock     *big.Int
		L1Bias         *big.Int
		GenesisBlock   *big.Int
		Duration       *big.Int
		FreezeDuration *big.Int
		QuorumNumber   uint8
		MinWeight      *big.Int
		MaxWeight      *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartBlock = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.L1Bias = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.GenesisBlock = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Duration = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.FreezeDuration = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.QuorumNumber = *abi.ConvertType(out[5], new(uint8)).(*uint8)
	outstruct.MinWeight = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.MaxWeight = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CommitteeParams is a free data retrieval call binding the contract method 0x72856455.
//
// Solidity: function committeeParams(uint32 ) view returns(uint256 startBlock, int256 l1Bias, uint256 genesisBlock, uint256 duration, uint256 freezeDuration, uint8 quorumNumber, uint96 minWeight, uint96 maxWeight)
func (_Committee *CommitteeSession) CommitteeParams(arg0 uint32) (struct {
	StartBlock     *big.Int
	L1Bias         *big.Int
	GenesisBlock   *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
	QuorumNumber   uint8
	MinWeight      *big.Int
	MaxWeight      *big.Int
}, error) {
	return _Committee.Contract.CommitteeParams(&_Committee.CallOpts, arg0)
}

// CommitteeParams is a free data retrieval call binding the contract method 0x72856455.
//
// Solidity: function committeeParams(uint32 ) view returns(uint256 startBlock, int256 l1Bias, uint256 genesisBlock, uint256 duration, uint256 freezeDuration, uint8 quorumNumber, uint96 minWeight, uint96 maxWeight)
func (_Committee *CommitteeCallerSession) CommitteeParams(arg0 uint32) (struct {
	StartBlock     *big.Int
	L1Bias         *big.Int
	GenesisBlock   *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
	QuorumNumber   uint8
	MinWeight      *big.Int
	MaxWeight      *big.Int
}, error) {
	return _Committee.Contract.CommitteeParams(&_Committee.CallOpts, arg0)
}

// Committees is a free data retrieval call binding the contract method 0xa63490a2.
//
// Solidity: function committees(uint32 , uint256 ) view returns(bytes32 root, uint224 updatedBlock, uint32 leafCount)
func (_Committee *CommitteeCaller) Committees(opts *bind.CallOpts, arg0 uint32, arg1 *big.Int) (struct {
	Root         [32]byte
	UpdatedBlock *big.Int
	LeafCount    uint32
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "committees", arg0, arg1)

	outstruct := new(struct {
		Root         [32]byte
		UpdatedBlock *big.Int
		LeafCount    uint32
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Root = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.UpdatedBlock = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.LeafCount = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

// Committees is a free data retrieval call binding the contract method 0xa63490a2.
//
// Solidity: function committees(uint32 , uint256 ) view returns(bytes32 root, uint224 updatedBlock, uint32 leafCount)
func (_Committee *CommitteeSession) Committees(arg0 uint32, arg1 *big.Int) (struct {
	Root         [32]byte
	UpdatedBlock *big.Int
	LeafCount    uint32
}, error) {
	return _Committee.Contract.Committees(&_Committee.CallOpts, arg0, arg1)
}

// Committees is a free data retrieval call binding the contract method 0xa63490a2.
//
// Solidity: function committees(uint32 , uint256 ) view returns(bytes32 root, uint224 updatedBlock, uint32 leafCount)
func (_Committee *CommitteeCallerSession) Committees(arg0 uint32, arg1 *big.Int) (struct {
	Root         [32]byte
	UpdatedBlock *big.Int
	LeafCount    uint32
}, error) {
	return _Committee.Contract.Committees(&_Committee.CallOpts, arg0, arg1)
}

// GetBlsPubKeyVotingPowers is a free data retrieval call binding the contract method 0x24ca7a48.
//
// Solidity: function getBlsPubKeyVotingPowers(address opAddr, uint32 chainID) view returns(uint96[] individualVotingPowers)
func (_Committee *CommitteeCaller) GetBlsPubKeyVotingPowers(opts *bind.CallOpts, opAddr common.Address, chainID uint32) ([]*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getBlsPubKeyVotingPowers", opAddr, chainID)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetBlsPubKeyVotingPowers is a free data retrieval call binding the contract method 0x24ca7a48.
//
// Solidity: function getBlsPubKeyVotingPowers(address opAddr, uint32 chainID) view returns(uint96[] individualVotingPowers)
func (_Committee *CommitteeSession) GetBlsPubKeyVotingPowers(opAddr common.Address, chainID uint32) ([]*big.Int, error) {
	return _Committee.Contract.GetBlsPubKeyVotingPowers(&_Committee.CallOpts, opAddr, chainID)
}

// GetBlsPubKeyVotingPowers is a free data retrieval call binding the contract method 0x24ca7a48.
//
// Solidity: function getBlsPubKeyVotingPowers(address opAddr, uint32 chainID) view returns(uint96[] individualVotingPowers)
func (_Committee *CommitteeCallerSession) GetBlsPubKeyVotingPowers(opAddr common.Address, chainID uint32) ([]*big.Int, error) {
	return _Committee.Contract.GetBlsPubKeyVotingPowers(&_Committee.CallOpts, opAddr, chainID)
}

// GetBlsPubKeys is a free data retrieval call binding the contract method 0xa43dd8dd.
//
// Solidity: function getBlsPubKeys(address operator) view returns(uint256[2][])
func (_Committee *CommitteeCaller) GetBlsPubKeys(opts *bind.CallOpts, operator common.Address) ([][2]*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getBlsPubKeys", operator)

	if err != nil {
		return *new([][2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([][2]*big.Int)).(*[][2]*big.Int)

	return out0, err

}

// GetBlsPubKeys is a free data retrieval call binding the contract method 0xa43dd8dd.
//
// Solidity: function getBlsPubKeys(address operator) view returns(uint256[2][])
func (_Committee *CommitteeSession) GetBlsPubKeys(operator common.Address) ([][2]*big.Int, error) {
	return _Committee.Contract.GetBlsPubKeys(&_Committee.CallOpts, operator)
}

// GetBlsPubKeys is a free data retrieval call binding the contract method 0xa43dd8dd.
//
// Solidity: function getBlsPubKeys(address operator) view returns(uint256[2][])
func (_Committee *CommitteeCallerSession) GetBlsPubKeys(operator common.Address) ([][2]*big.Int, error) {
	return _Committee.Contract.GetBlsPubKeys(&_Committee.CallOpts, operator)
}

// GetCommittee is a free data retrieval call binding the contract method 0xdef9e7d5.
//
// Solidity: function getCommittee(uint32 chainID, uint256 blockNumber) view returns((bytes32,uint224,uint32) currentCommittee)
func (_Committee *CommitteeCaller) GetCommittee(opts *bind.CallOpts, chainID uint32, blockNumber *big.Int) (ILagrangeCommitteeCommitteeData, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getCommittee", chainID, blockNumber)

	if err != nil {
		return *new(ILagrangeCommitteeCommitteeData), err
	}

	out0 := *abi.ConvertType(out[0], new(ILagrangeCommitteeCommitteeData)).(*ILagrangeCommitteeCommitteeData)

	return out0, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xdef9e7d5.
//
// Solidity: function getCommittee(uint32 chainID, uint256 blockNumber) view returns((bytes32,uint224,uint32) currentCommittee)
func (_Committee *CommitteeSession) GetCommittee(chainID uint32, blockNumber *big.Int) (ILagrangeCommitteeCommitteeData, error) {
	return _Committee.Contract.GetCommittee(&_Committee.CallOpts, chainID, blockNumber)
}

// GetCommittee is a free data retrieval call binding the contract method 0xdef9e7d5.
//
// Solidity: function getCommittee(uint32 chainID, uint256 blockNumber) view returns((bytes32,uint224,uint32) currentCommittee)
func (_Committee *CommitteeCallerSession) GetCommittee(chainID uint32, blockNumber *big.Int) (ILagrangeCommitteeCommitteeData, error) {
	return _Committee.Contract.GetCommittee(&_Committee.CallOpts, chainID, blockNumber)
}

// GetEpochInterval is a free data retrieval call binding the contract method 0x0f225b84.
//
// Solidity: function getEpochInterval(uint32 chainID, uint256 epochNumber) view returns(uint256 startBlock, uint256 freezeBlock, uint256 endBlock)
func (_Committee *CommitteeCaller) GetEpochInterval(opts *bind.CallOpts, chainID uint32, epochNumber *big.Int) (struct {
	StartBlock  *big.Int
	FreezeBlock *big.Int
	EndBlock    *big.Int
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getEpochInterval", chainID, epochNumber)

	outstruct := new(struct {
		StartBlock  *big.Int
		FreezeBlock *big.Int
		EndBlock    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartBlock = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.FreezeBlock = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.EndBlock = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetEpochInterval is a free data retrieval call binding the contract method 0x0f225b84.
//
// Solidity: function getEpochInterval(uint32 chainID, uint256 epochNumber) view returns(uint256 startBlock, uint256 freezeBlock, uint256 endBlock)
func (_Committee *CommitteeSession) GetEpochInterval(chainID uint32, epochNumber *big.Int) (struct {
	StartBlock  *big.Int
	FreezeBlock *big.Int
	EndBlock    *big.Int
}, error) {
	return _Committee.Contract.GetEpochInterval(&_Committee.CallOpts, chainID, epochNumber)
}

// GetEpochInterval is a free data retrieval call binding the contract method 0x0f225b84.
//
// Solidity: function getEpochInterval(uint32 chainID, uint256 epochNumber) view returns(uint256 startBlock, uint256 freezeBlock, uint256 endBlock)
func (_Committee *CommitteeCallerSession) GetEpochInterval(chainID uint32, epochNumber *big.Int) (struct {
	StartBlock  *big.Int
	FreezeBlock *big.Int
	EndBlock    *big.Int
}, error) {
	return _Committee.Contract.GetEpochInterval(&_Committee.CallOpts, chainID, epochNumber)
}

// GetEpochNumber is a free data retrieval call binding the contract method 0x78d81d08.
//
// Solidity: function getEpochNumber(uint32 chainID, uint256 blockNumber) view returns(uint256 epochNumber)
func (_Committee *CommitteeCaller) GetEpochNumber(opts *bind.CallOpts, chainID uint32, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getEpochNumber", chainID, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochNumber is a free data retrieval call binding the contract method 0x78d81d08.
//
// Solidity: function getEpochNumber(uint32 chainID, uint256 blockNumber) view returns(uint256 epochNumber)
func (_Committee *CommitteeSession) GetEpochNumber(chainID uint32, blockNumber *big.Int) (*big.Int, error) {
	return _Committee.Contract.GetEpochNumber(&_Committee.CallOpts, chainID, blockNumber)
}

// GetEpochNumber is a free data retrieval call binding the contract method 0x78d81d08.
//
// Solidity: function getEpochNumber(uint32 chainID, uint256 blockNumber) view returns(uint256 epochNumber)
func (_Committee *CommitteeCallerSession) GetEpochNumber(chainID uint32, blockNumber *big.Int) (*big.Int, error) {
	return _Committee.Contract.GetEpochNumber(&_Committee.CallOpts, chainID, blockNumber)
}

// GetOperatorVotingPower is a free data retrieval call binding the contract method 0x5af1a88f.
//
// Solidity: function getOperatorVotingPower(address opAddr, uint32 chainID) view returns(uint96)
func (_Committee *CommitteeCaller) GetOperatorVotingPower(opts *bind.CallOpts, opAddr common.Address, chainID uint32) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getOperatorVotingPower", opAddr, chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetOperatorVotingPower is a free data retrieval call binding the contract method 0x5af1a88f.
//
// Solidity: function getOperatorVotingPower(address opAddr, uint32 chainID) view returns(uint96)
func (_Committee *CommitteeSession) GetOperatorVotingPower(opAddr common.Address, chainID uint32) (*big.Int, error) {
	return _Committee.Contract.GetOperatorVotingPower(&_Committee.CallOpts, opAddr, chainID)
}

// GetOperatorVotingPower is a free data retrieval call binding the contract method 0x5af1a88f.
//
// Solidity: function getOperatorVotingPower(address opAddr, uint32 chainID) view returns(uint96)
func (_Committee *CommitteeCallerSession) GetOperatorVotingPower(opAddr common.Address, chainID uint32) (*big.Int, error) {
	return _Committee.Contract.GetOperatorVotingPower(&_Committee.CallOpts, opAddr, chainID)
}

// GetTokenListForOperator is a free data retrieval call binding the contract method 0x56bf7c25.
//
// Solidity: function getTokenListForOperator(address operator) view returns(address[])
func (_Committee *CommitteeCaller) GetTokenListForOperator(opts *bind.CallOpts, operator common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getTokenListForOperator", operator)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetTokenListForOperator is a free data retrieval call binding the contract method 0x56bf7c25.
//
// Solidity: function getTokenListForOperator(address operator) view returns(address[])
func (_Committee *CommitteeSession) GetTokenListForOperator(operator common.Address) ([]common.Address, error) {
	return _Committee.Contract.GetTokenListForOperator(&_Committee.CallOpts, operator)
}

// GetTokenListForOperator is a free data retrieval call binding the contract method 0x56bf7c25.
//
// Solidity: function getTokenListForOperator(address operator) view returns(address[])
func (_Committee *CommitteeCallerSession) GetTokenListForOperator(operator common.Address) ([]common.Address, error) {
	return _Committee.Contract.GetTokenListForOperator(&_Committee.CallOpts, operator)
}

// IsLocked is a free data retrieval call binding the contract method 0x3d6a2679.
//
// Solidity: function isLocked(uint32 chainID) view returns(bool, uint256)
func (_Committee *CommitteeCaller) IsLocked(opts *bind.CallOpts, chainID uint32) (bool, *big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "isLocked", chainID)

	if err != nil {
		return *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// IsLocked is a free data retrieval call binding the contract method 0x3d6a2679.
//
// Solidity: function isLocked(uint32 chainID) view returns(bool, uint256)
func (_Committee *CommitteeSession) IsLocked(chainID uint32) (bool, *big.Int, error) {
	return _Committee.Contract.IsLocked(&_Committee.CallOpts, chainID)
}

// IsLocked is a free data retrieval call binding the contract method 0x3d6a2679.
//
// Solidity: function isLocked(uint32 chainID) view returns(bool, uint256)
func (_Committee *CommitteeCallerSession) IsLocked(chainID uint32) (bool, *big.Int, error) {
	return _Committee.Contract.IsLocked(&_Committee.CallOpts, chainID)
}

// IsUnregisterable is a free data retrieval call binding the contract method 0x19a74c5f.
//
// Solidity: function isUnregisterable(address operator) view returns(bool, uint256)
func (_Committee *CommitteeCaller) IsUnregisterable(opts *bind.CallOpts, operator common.Address) (bool, *big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "isUnregisterable", operator)

	if err != nil {
		return *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// IsUnregisterable is a free data retrieval call binding the contract method 0x19a74c5f.
//
// Solidity: function isUnregisterable(address operator) view returns(bool, uint256)
func (_Committee *CommitteeSession) IsUnregisterable(operator common.Address) (bool, *big.Int, error) {
	return _Committee.Contract.IsUnregisterable(&_Committee.CallOpts, operator)
}

// IsUnregisterable is a free data retrieval call binding the contract method 0x19a74c5f.
//
// Solidity: function isUnregisterable(address operator) view returns(bool, uint256)
func (_Committee *CommitteeCallerSession) IsUnregisterable(operator common.Address) (bool, *big.Int, error) {
	return _Committee.Contract.IsUnregisterable(&_Committee.CallOpts, operator)
}

// IsUpdatable is a free data retrieval call binding the contract method 0x85ab9a7a.
//
// Solidity: function isUpdatable(uint32 chainID, uint256 epochNumber) view returns(bool)
func (_Committee *CommitteeCaller) IsUpdatable(opts *bind.CallOpts, chainID uint32, epochNumber *big.Int) (bool, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "isUpdatable", chainID, epochNumber)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsUpdatable is a free data retrieval call binding the contract method 0x85ab9a7a.
//
// Solidity: function isUpdatable(uint32 chainID, uint256 epochNumber) view returns(bool)
func (_Committee *CommitteeSession) IsUpdatable(chainID uint32, epochNumber *big.Int) (bool, error) {
	return _Committee.Contract.IsUpdatable(&_Committee.CallOpts, chainID, epochNumber)
}

// IsUpdatable is a free data retrieval call binding the contract method 0x85ab9a7a.
//
// Solidity: function isUpdatable(uint32 chainID, uint256 epochNumber) view returns(bool)
func (_Committee *CommitteeCallerSession) IsUpdatable(chainID uint32, epochNumber *big.Int) (bool, error) {
	return _Committee.Contract.IsUpdatable(&_Committee.CallOpts, chainID, epochNumber)
}

// OperatorsStatus is a free data retrieval call binding the contract method 0x95703d08.
//
// Solidity: function operatorsStatus(address ) view returns(address signAddress, uint8 subscribedChainCount)
func (_Committee *CommitteeCaller) OperatorsStatus(opts *bind.CallOpts, arg0 common.Address) (struct {
	SignAddress          common.Address
	SubscribedChainCount uint8
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "operatorsStatus", arg0)

	outstruct := new(struct {
		SignAddress          common.Address
		SubscribedChainCount uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.SignAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.SubscribedChainCount = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// OperatorsStatus is a free data retrieval call binding the contract method 0x95703d08.
//
// Solidity: function operatorsStatus(address ) view returns(address signAddress, uint8 subscribedChainCount)
func (_Committee *CommitteeSession) OperatorsStatus(arg0 common.Address) (struct {
	SignAddress          common.Address
	SubscribedChainCount uint8
}, error) {
	return _Committee.Contract.OperatorsStatus(&_Committee.CallOpts, arg0)
}

// OperatorsStatus is a free data retrieval call binding the contract method 0x95703d08.
//
// Solidity: function operatorsStatus(address ) view returns(address signAddress, uint8 subscribedChainCount)
func (_Committee *CommitteeCallerSession) OperatorsStatus(arg0 common.Address) (struct {
	SignAddress          common.Address
	SubscribedChainCount uint8
}, error) {
	return _Committee.Contract.OperatorsStatus(&_Committee.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Committee *CommitteeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Committee *CommitteeSession) Owner() (common.Address, error) {
	return _Committee.Contract.Owner(&_Committee.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Committee *CommitteeCallerSession) Owner() (common.Address, error) {
	return _Committee.Contract.Owner(&_Committee.CallOpts)
}

// Service is a free data retrieval call binding the contract method 0xd598d4c9.
//
// Solidity: function service() view returns(address)
func (_Committee *CommitteeCaller) Service(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "service")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Service is a free data retrieval call binding the contract method 0xd598d4c9.
//
// Solidity: function service() view returns(address)
func (_Committee *CommitteeSession) Service() (common.Address, error) {
	return _Committee.Contract.Service(&_Committee.CallOpts)
}

// Service is a free data retrieval call binding the contract method 0xd598d4c9.
//
// Solidity: function service() view returns(address)
func (_Committee *CommitteeCallerSession) Service() (common.Address, error) {
	return _Committee.Contract.Service(&_Committee.CallOpts)
}

// SubscribedChains is a free data retrieval call binding the contract method 0x53b7a0ff.
//
// Solidity: function subscribedChains(uint32 , address ) view returns(bool)
func (_Committee *CommitteeCaller) SubscribedChains(opts *bind.CallOpts, arg0 uint32, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "subscribedChains", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SubscribedChains is a free data retrieval call binding the contract method 0x53b7a0ff.
//
// Solidity: function subscribedChains(uint32 , address ) view returns(bool)
func (_Committee *CommitteeSession) SubscribedChains(arg0 uint32, arg1 common.Address) (bool, error) {
	return _Committee.Contract.SubscribedChains(&_Committee.CallOpts, arg0, arg1)
}

// SubscribedChains is a free data retrieval call binding the contract method 0x53b7a0ff.
//
// Solidity: function subscribedChains(uint32 , address ) view returns(bool)
func (_Committee *CommitteeCallerSession) SubscribedChains(arg0 uint32, arg1 common.Address) (bool, error) {
	return _Committee.Contract.SubscribedChains(&_Committee.CallOpts, arg0, arg1)
}

// UpdatedEpoch is a free data retrieval call binding the contract method 0x4db6f74a.
//
// Solidity: function updatedEpoch(uint32 ) view returns(uint256)
func (_Committee *CommitteeCaller) UpdatedEpoch(opts *bind.CallOpts, arg0 uint32) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "updatedEpoch", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UpdatedEpoch is a free data retrieval call binding the contract method 0x4db6f74a.
//
// Solidity: function updatedEpoch(uint32 ) view returns(uint256)
func (_Committee *CommitteeSession) UpdatedEpoch(arg0 uint32) (*big.Int, error) {
	return _Committee.Contract.UpdatedEpoch(&_Committee.CallOpts, arg0)
}

// UpdatedEpoch is a free data retrieval call binding the contract method 0x4db6f74a.
//
// Solidity: function updatedEpoch(uint32 ) view returns(uint256)
func (_Committee *CommitteeCallerSession) UpdatedEpoch(arg0 uint32) (*big.Int, error) {
	return _Committee.Contract.UpdatedEpoch(&_Committee.CallOpts, arg0)
}

// VoteWeigher is a free data retrieval call binding the contract method 0xef030673.
//
// Solidity: function voteWeigher() view returns(address)
func (_Committee *CommitteeCaller) VoteWeigher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "voteWeigher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VoteWeigher is a free data retrieval call binding the contract method 0xef030673.
//
// Solidity: function voteWeigher() view returns(address)
func (_Committee *CommitteeSession) VoteWeigher() (common.Address, error) {
	return _Committee.Contract.VoteWeigher(&_Committee.CallOpts)
}

// VoteWeigher is a free data retrieval call binding the contract method 0xef030673.
//
// Solidity: function voteWeigher() view returns(address)
func (_Committee *CommitteeCallerSession) VoteWeigher() (common.Address, error) {
	return _Committee.Contract.VoteWeigher(&_Committee.CallOpts)
}

// AddBlsPubKeys is a paid mutator transaction binding the contract method 0xbd7cd8ab.
//
// Solidity: function addBlsPubKeys(address operator, uint256[2][] additionalBlsPubKeys) returns()
func (_Committee *CommitteeTransactor) AddBlsPubKeys(opts *bind.TransactOpts, operator common.Address, additionalBlsPubKeys [][2]*big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "addBlsPubKeys", operator, additionalBlsPubKeys)
}

// AddBlsPubKeys is a paid mutator transaction binding the contract method 0xbd7cd8ab.
//
// Solidity: function addBlsPubKeys(address operator, uint256[2][] additionalBlsPubKeys) returns()
func (_Committee *CommitteeSession) AddBlsPubKeys(operator common.Address, additionalBlsPubKeys [][2]*big.Int) (*types.Transaction, error) {
	return _Committee.Contract.AddBlsPubKeys(&_Committee.TransactOpts, operator, additionalBlsPubKeys)
}

// AddBlsPubKeys is a paid mutator transaction binding the contract method 0xbd7cd8ab.
//
// Solidity: function addBlsPubKeys(address operator, uint256[2][] additionalBlsPubKeys) returns()
func (_Committee *CommitteeTransactorSession) AddBlsPubKeys(operator common.Address, additionalBlsPubKeys [][2]*big.Int) (*types.Transaction, error) {
	return _Committee.Contract.AddBlsPubKeys(&_Committee.TransactOpts, operator, additionalBlsPubKeys)
}

// AddOperator is a paid mutator transaction binding the contract method 0xc7e8a4f3.
//
// Solidity: function addOperator(address operator, address signAddress, uint256[2][] blsPubKeys) returns()
func (_Committee *CommitteeTransactor) AddOperator(opts *bind.TransactOpts, operator common.Address, signAddress common.Address, blsPubKeys [][2]*big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "addOperator", operator, signAddress, blsPubKeys)
}

// AddOperator is a paid mutator transaction binding the contract method 0xc7e8a4f3.
//
// Solidity: function addOperator(address operator, address signAddress, uint256[2][] blsPubKeys) returns()
func (_Committee *CommitteeSession) AddOperator(operator common.Address, signAddress common.Address, blsPubKeys [][2]*big.Int) (*types.Transaction, error) {
	return _Committee.Contract.AddOperator(&_Committee.TransactOpts, operator, signAddress, blsPubKeys)
}

// AddOperator is a paid mutator transaction binding the contract method 0xc7e8a4f3.
//
// Solidity: function addOperator(address operator, address signAddress, uint256[2][] blsPubKeys) returns()
func (_Committee *CommitteeTransactorSession) AddOperator(operator common.Address, signAddress common.Address, blsPubKeys [][2]*big.Int) (*types.Transaction, error) {
	return _Committee.Contract.AddOperator(&_Committee.TransactOpts, operator, signAddress, blsPubKeys)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_Committee *CommitteeTransactor) Initialize(opts *bind.TransactOpts, initialOwner common.Address) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "initialize", initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_Committee *CommitteeSession) Initialize(initialOwner common.Address) (*types.Transaction, error) {
	return _Committee.Contract.Initialize(&_Committee.TransactOpts, initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_Committee *CommitteeTransactorSession) Initialize(initialOwner common.Address) (*types.Transaction, error) {
	return _Committee.Contract.Initialize(&_Committee.TransactOpts, initialOwner)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xc8491506.
//
// Solidity: function registerChain(uint32 chainID, uint256 genesisBlock, uint256 epochPeriod, uint256 freezeDuration, uint8 quorumNumber, uint96 minWeight, uint96 maxWeight) returns()
func (_Committee *CommitteeTransactor) RegisterChain(opts *bind.TransactOpts, chainID uint32, genesisBlock *big.Int, epochPeriod *big.Int, freezeDuration *big.Int, quorumNumber uint8, minWeight *big.Int, maxWeight *big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "registerChain", chainID, genesisBlock, epochPeriod, freezeDuration, quorumNumber, minWeight, maxWeight)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xc8491506.
//
// Solidity: function registerChain(uint32 chainID, uint256 genesisBlock, uint256 epochPeriod, uint256 freezeDuration, uint8 quorumNumber, uint96 minWeight, uint96 maxWeight) returns()
func (_Committee *CommitteeSession) RegisterChain(chainID uint32, genesisBlock *big.Int, epochPeriod *big.Int, freezeDuration *big.Int, quorumNumber uint8, minWeight *big.Int, maxWeight *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.RegisterChain(&_Committee.TransactOpts, chainID, genesisBlock, epochPeriod, freezeDuration, quorumNumber, minWeight, maxWeight)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xc8491506.
//
// Solidity: function registerChain(uint32 chainID, uint256 genesisBlock, uint256 epochPeriod, uint256 freezeDuration, uint8 quorumNumber, uint96 minWeight, uint96 maxWeight) returns()
func (_Committee *CommitteeTransactorSession) RegisterChain(chainID uint32, genesisBlock *big.Int, epochPeriod *big.Int, freezeDuration *big.Int, quorumNumber uint8, minWeight *big.Int, maxWeight *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.RegisterChain(&_Committee.TransactOpts, chainID, genesisBlock, epochPeriod, freezeDuration, quorumNumber, minWeight, maxWeight)
}

// RemoveBlsPubKeys is a paid mutator transaction binding the contract method 0x0c57b9d4.
//
// Solidity: function removeBlsPubKeys(address operator, uint32[] indices) returns()
func (_Committee *CommitteeTransactor) RemoveBlsPubKeys(opts *bind.TransactOpts, operator common.Address, indices []uint32) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "removeBlsPubKeys", operator, indices)
}

// RemoveBlsPubKeys is a paid mutator transaction binding the contract method 0x0c57b9d4.
//
// Solidity: function removeBlsPubKeys(address operator, uint32[] indices) returns()
func (_Committee *CommitteeSession) RemoveBlsPubKeys(operator common.Address, indices []uint32) (*types.Transaction, error) {
	return _Committee.Contract.RemoveBlsPubKeys(&_Committee.TransactOpts, operator, indices)
}

// RemoveBlsPubKeys is a paid mutator transaction binding the contract method 0x0c57b9d4.
//
// Solidity: function removeBlsPubKeys(address operator, uint32[] indices) returns()
func (_Committee *CommitteeTransactorSession) RemoveBlsPubKeys(operator common.Address, indices []uint32) (*types.Transaction, error) {
	return _Committee.Contract.RemoveBlsPubKeys(&_Committee.TransactOpts, operator, indices)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address operator) returns()
func (_Committee *CommitteeTransactor) RemoveOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "removeOperator", operator)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address operator) returns()
func (_Committee *CommitteeSession) RemoveOperator(operator common.Address) (*types.Transaction, error) {
	return _Committee.Contract.RemoveOperator(&_Committee.TransactOpts, operator)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address operator) returns()
func (_Committee *CommitteeTransactorSession) RemoveOperator(operator common.Address) (*types.Transaction, error) {
	return _Committee.Contract.RemoveOperator(&_Committee.TransactOpts, operator)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Committee *CommitteeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Committee *CommitteeSession) RenounceOwnership() (*types.Transaction, error) {
	return _Committee.Contract.RenounceOwnership(&_Committee.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Committee *CommitteeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Committee.Contract.RenounceOwnership(&_Committee.TransactOpts)
}

// RevertEpoch is a paid mutator transaction binding the contract method 0xa6b15068.
//
// Solidity: function revertEpoch(uint32 chainID, uint256 epochNumber) returns()
func (_Committee *CommitteeTransactor) RevertEpoch(opts *bind.TransactOpts, chainID uint32, epochNumber *big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "revertEpoch", chainID, epochNumber)
}

// RevertEpoch is a paid mutator transaction binding the contract method 0xa6b15068.
//
// Solidity: function revertEpoch(uint32 chainID, uint256 epochNumber) returns()
func (_Committee *CommitteeSession) RevertEpoch(chainID uint32, epochNumber *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.RevertEpoch(&_Committee.TransactOpts, chainID, epochNumber)
}

// RevertEpoch is a paid mutator transaction binding the contract method 0xa6b15068.
//
// Solidity: function revertEpoch(uint32 chainID, uint256 epochNumber) returns()
func (_Committee *CommitteeTransactorSession) RevertEpoch(chainID uint32, epochNumber *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.RevertEpoch(&_Committee.TransactOpts, chainID, epochNumber)
}

// SubscribeChain is a paid mutator transaction binding the contract method 0x6b11c38e.
//
// Solidity: function subscribeChain(address operator, uint32 chainID) returns()
func (_Committee *CommitteeTransactor) SubscribeChain(opts *bind.TransactOpts, operator common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "subscribeChain", operator, chainID)
}

// SubscribeChain is a paid mutator transaction binding the contract method 0x6b11c38e.
//
// Solidity: function subscribeChain(address operator, uint32 chainID) returns()
func (_Committee *CommitteeSession) SubscribeChain(operator common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.Contract.SubscribeChain(&_Committee.TransactOpts, operator, chainID)
}

// SubscribeChain is a paid mutator transaction binding the contract method 0x6b11c38e.
//
// Solidity: function subscribeChain(address operator, uint32 chainID) returns()
func (_Committee *CommitteeTransactorSession) SubscribeChain(operator common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.Contract.SubscribeChain(&_Committee.TransactOpts, operator, chainID)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Committee *CommitteeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Committee *CommitteeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Committee.Contract.TransferOwnership(&_Committee.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Committee *CommitteeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Committee.Contract.TransferOwnership(&_Committee.TransactOpts, newOwner)
}

// UnsubscribeByAdmin is a paid mutator transaction binding the contract method 0x935a9b6a.
//
// Solidity: function unsubscribeByAdmin(address[] operators, uint32 chainID) returns()
func (_Committee *CommitteeTransactor) UnsubscribeByAdmin(opts *bind.TransactOpts, operators []common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "unsubscribeByAdmin", operators, chainID)
}

// UnsubscribeByAdmin is a paid mutator transaction binding the contract method 0x935a9b6a.
//
// Solidity: function unsubscribeByAdmin(address[] operators, uint32 chainID) returns()
func (_Committee *CommitteeSession) UnsubscribeByAdmin(operators []common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.Contract.UnsubscribeByAdmin(&_Committee.TransactOpts, operators, chainID)
}

// UnsubscribeByAdmin is a paid mutator transaction binding the contract method 0x935a9b6a.
//
// Solidity: function unsubscribeByAdmin(address[] operators, uint32 chainID) returns()
func (_Committee *CommitteeTransactorSession) UnsubscribeByAdmin(operators []common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.Contract.UnsubscribeByAdmin(&_Committee.TransactOpts, operators, chainID)
}

// UnsubscribeChain is a paid mutator transaction binding the contract method 0x0e9f564b.
//
// Solidity: function unsubscribeChain(address operator, uint32 chainID) returns()
func (_Committee *CommitteeTransactor) UnsubscribeChain(opts *bind.TransactOpts, operator common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "unsubscribeChain", operator, chainID)
}

// UnsubscribeChain is a paid mutator transaction binding the contract method 0x0e9f564b.
//
// Solidity: function unsubscribeChain(address operator, uint32 chainID) returns()
func (_Committee *CommitteeSession) UnsubscribeChain(operator common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.Contract.UnsubscribeChain(&_Committee.TransactOpts, operator, chainID)
}

// UnsubscribeChain is a paid mutator transaction binding the contract method 0x0e9f564b.
//
// Solidity: function unsubscribeChain(address operator, uint32 chainID) returns()
func (_Committee *CommitteeTransactorSession) UnsubscribeChain(operator common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.Contract.UnsubscribeChain(&_Committee.TransactOpts, operator, chainID)
}

// Update is a paid mutator transaction binding the contract method 0x3bc72805.
//
// Solidity: function update(uint32 chainID, uint256 epochNumber) returns()
func (_Committee *CommitteeTransactor) Update(opts *bind.TransactOpts, chainID uint32, epochNumber *big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "update", chainID, epochNumber)
}

// Update is a paid mutator transaction binding the contract method 0x3bc72805.
//
// Solidity: function update(uint32 chainID, uint256 epochNumber) returns()
func (_Committee *CommitteeSession) Update(chainID uint32, epochNumber *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.Update(&_Committee.TransactOpts, chainID, epochNumber)
}

// Update is a paid mutator transaction binding the contract method 0x3bc72805.
//
// Solidity: function update(uint32 chainID, uint256 epochNumber) returns()
func (_Committee *CommitteeTransactorSession) Update(chainID uint32, epochNumber *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.Update(&_Committee.TransactOpts, chainID, epochNumber)
}

// UpdateBlsPubKey is a paid mutator transaction binding the contract method 0xe464b31f.
//
// Solidity: function updateBlsPubKey(address operator, uint32 index, uint256[2] blsPubKey) returns()
func (_Committee *CommitteeTransactor) UpdateBlsPubKey(opts *bind.TransactOpts, operator common.Address, index uint32, blsPubKey [2]*big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "updateBlsPubKey", operator, index, blsPubKey)
}

// UpdateBlsPubKey is a paid mutator transaction binding the contract method 0xe464b31f.
//
// Solidity: function updateBlsPubKey(address operator, uint32 index, uint256[2] blsPubKey) returns()
func (_Committee *CommitteeSession) UpdateBlsPubKey(operator common.Address, index uint32, blsPubKey [2]*big.Int) (*types.Transaction, error) {
	return _Committee.Contract.UpdateBlsPubKey(&_Committee.TransactOpts, operator, index, blsPubKey)
}

// UpdateBlsPubKey is a paid mutator transaction binding the contract method 0xe464b31f.
//
// Solidity: function updateBlsPubKey(address operator, uint32 index, uint256[2] blsPubKey) returns()
func (_Committee *CommitteeTransactorSession) UpdateBlsPubKey(operator common.Address, index uint32, blsPubKey [2]*big.Int) (*types.Transaction, error) {
	return _Committee.Contract.UpdateBlsPubKey(&_Committee.TransactOpts, operator, index, blsPubKey)
}

// UpdateChain is a paid mutator transaction binding the contract method 0x13538c7f.
//
// Solidity: function updateChain(uint32 chainID, int256 l1Bias, uint256 genesisBlock, uint256 epochPeriod, uint256 freezeDuration, uint8 quorumNumber, uint96 minWeight, uint96 maxWeight) returns()
func (_Committee *CommitteeTransactor) UpdateChain(opts *bind.TransactOpts, chainID uint32, l1Bias *big.Int, genesisBlock *big.Int, epochPeriod *big.Int, freezeDuration *big.Int, quorumNumber uint8, minWeight *big.Int, maxWeight *big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "updateChain", chainID, l1Bias, genesisBlock, epochPeriod, freezeDuration, quorumNumber, minWeight, maxWeight)
}

// UpdateChain is a paid mutator transaction binding the contract method 0x13538c7f.
//
// Solidity: function updateChain(uint32 chainID, int256 l1Bias, uint256 genesisBlock, uint256 epochPeriod, uint256 freezeDuration, uint8 quorumNumber, uint96 minWeight, uint96 maxWeight) returns()
func (_Committee *CommitteeSession) UpdateChain(chainID uint32, l1Bias *big.Int, genesisBlock *big.Int, epochPeriod *big.Int, freezeDuration *big.Int, quorumNumber uint8, minWeight *big.Int, maxWeight *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.UpdateChain(&_Committee.TransactOpts, chainID, l1Bias, genesisBlock, epochPeriod, freezeDuration, quorumNumber, minWeight, maxWeight)
}

// UpdateChain is a paid mutator transaction binding the contract method 0x13538c7f.
//
// Solidity: function updateChain(uint32 chainID, int256 l1Bias, uint256 genesisBlock, uint256 epochPeriod, uint256 freezeDuration, uint8 quorumNumber, uint96 minWeight, uint96 maxWeight) returns()
func (_Committee *CommitteeTransactorSession) UpdateChain(chainID uint32, l1Bias *big.Int, genesisBlock *big.Int, epochPeriod *big.Int, freezeDuration *big.Int, quorumNumber uint8, minWeight *big.Int, maxWeight *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.UpdateChain(&_Committee.TransactOpts, chainID, l1Bias, genesisBlock, epochPeriod, freezeDuration, quorumNumber, minWeight, maxWeight)
}

// UpdateSignAddress is a paid mutator transaction binding the contract method 0x2c36c718.
//
// Solidity: function updateSignAddress(address operator, address newSignAddress) returns()
func (_Committee *CommitteeTransactor) UpdateSignAddress(opts *bind.TransactOpts, operator common.Address, newSignAddress common.Address) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "updateSignAddress", operator, newSignAddress)
}

// UpdateSignAddress is a paid mutator transaction binding the contract method 0x2c36c718.
//
// Solidity: function updateSignAddress(address operator, address newSignAddress) returns()
func (_Committee *CommitteeSession) UpdateSignAddress(operator common.Address, newSignAddress common.Address) (*types.Transaction, error) {
	return _Committee.Contract.UpdateSignAddress(&_Committee.TransactOpts, operator, newSignAddress)
}

// UpdateSignAddress is a paid mutator transaction binding the contract method 0x2c36c718.
//
// Solidity: function updateSignAddress(address operator, address newSignAddress) returns()
func (_Committee *CommitteeTransactorSession) UpdateSignAddress(operator common.Address, newSignAddress common.Address) (*types.Transaction, error) {
	return _Committee.Contract.UpdateSignAddress(&_Committee.TransactOpts, operator, newSignAddress)
}

// CommitteeInitCommitteeIterator is returned from FilterInitCommittee and is used to iterate over the raw logs and unpacked data for InitCommittee events raised by the Committee contract.
type CommitteeInitCommitteeIterator struct {
	Event *CommitteeInitCommittee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeInitCommitteeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeInitCommittee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeInitCommittee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeInitCommitteeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeInitCommitteeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeInitCommittee represents a InitCommittee event raised by the Committee contract.
type CommitteeInitCommittee struct {
	ChainID        *big.Int
	QuorumNumber   uint8
	GenesisBlock   *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
	MinWeight      *big.Int
	MaxWeight      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInitCommittee is a free log retrieval operation binding the contract event 0x443f7a0c0eb557351b38f3fed112889e529704fb0ccaac63b1f0914816d880f3.
//
// Solidity: event InitCommittee(uint256 indexed chainID, uint8 indexed quorumNumber, uint256 genesisBlock, uint256 duration, uint256 freezeDuration, uint96 minWeight, uint96 maxWeight)
func (_Committee *CommitteeFilterer) FilterInitCommittee(opts *bind.FilterOpts, chainID []*big.Int, quorumNumber []uint8) (*CommitteeInitCommitteeIterator, error) {

	var chainIDRule []interface{}
	for _, chainIDItem := range chainID {
		chainIDRule = append(chainIDRule, chainIDItem)
	}
	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _Committee.contract.FilterLogs(opts, "InitCommittee", chainIDRule, quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &CommitteeInitCommitteeIterator{contract: _Committee.contract, event: "InitCommittee", logs: logs, sub: sub}, nil
}

// WatchInitCommittee is a free log subscription operation binding the contract event 0x443f7a0c0eb557351b38f3fed112889e529704fb0ccaac63b1f0914816d880f3.
//
// Solidity: event InitCommittee(uint256 indexed chainID, uint8 indexed quorumNumber, uint256 genesisBlock, uint256 duration, uint256 freezeDuration, uint96 minWeight, uint96 maxWeight)
func (_Committee *CommitteeFilterer) WatchInitCommittee(opts *bind.WatchOpts, sink chan<- *CommitteeInitCommittee, chainID []*big.Int, quorumNumber []uint8) (event.Subscription, error) {

	var chainIDRule []interface{}
	for _, chainIDItem := range chainID {
		chainIDRule = append(chainIDRule, chainIDItem)
	}
	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _Committee.contract.WatchLogs(opts, "InitCommittee", chainIDRule, quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeInitCommittee)
				if err := _Committee.contract.UnpackLog(event, "InitCommittee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitCommittee is a log parse operation binding the contract event 0x443f7a0c0eb557351b38f3fed112889e529704fb0ccaac63b1f0914816d880f3.
//
// Solidity: event InitCommittee(uint256 indexed chainID, uint8 indexed quorumNumber, uint256 genesisBlock, uint256 duration, uint256 freezeDuration, uint96 minWeight, uint96 maxWeight)
func (_Committee *CommitteeFilterer) ParseInitCommittee(log types.Log) (*CommitteeInitCommittee, error) {
	event := new(CommitteeInitCommittee)
	if err := _Committee.contract.UnpackLog(event, "InitCommittee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Committee contract.
type CommitteeInitializedIterator struct {
	Event *CommitteeInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeInitialized represents a Initialized event raised by the Committee contract.
type CommitteeInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Committee *CommitteeFilterer) FilterInitialized(opts *bind.FilterOpts) (*CommitteeInitializedIterator, error) {

	logs, sub, err := _Committee.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &CommitteeInitializedIterator{contract: _Committee.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Committee *CommitteeFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *CommitteeInitialized) (event.Subscription, error) {

	logs, sub, err := _Committee.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeInitialized)
				if err := _Committee.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Committee *CommitteeFilterer) ParseInitialized(log types.Log) (*CommitteeInitialized, error) {
	event := new(CommitteeInitialized)
	if err := _Committee.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Committee contract.
type CommitteeOwnershipTransferredIterator struct {
	Event *CommitteeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeOwnershipTransferred represents a OwnershipTransferred event raised by the Committee contract.
type CommitteeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Committee *CommitteeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CommitteeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Committee.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CommitteeOwnershipTransferredIterator{contract: _Committee.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Committee *CommitteeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CommitteeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Committee.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeOwnershipTransferred)
				if err := _Committee.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Committee *CommitteeFilterer) ParseOwnershipTransferred(log types.Log) (*CommitteeOwnershipTransferred, error) {
	event := new(CommitteeOwnershipTransferred)
	if err := _Committee.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeSignAddressUpdatedIterator is returned from FilterSignAddressUpdated and is used to iterate over the raw logs and unpacked data for SignAddressUpdated events raised by the Committee contract.
type CommitteeSignAddressUpdatedIterator struct {
	Event *CommitteeSignAddressUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeSignAddressUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeSignAddressUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeSignAddressUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeSignAddressUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeSignAddressUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeSignAddressUpdated represents a SignAddressUpdated event raised by the Committee contract.
type CommitteeSignAddressUpdated struct {
	Operator    common.Address
	SignAddress common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSignAddressUpdated is a free log retrieval operation binding the contract event 0xf29351472086a2d8b1af521f96d65142d14518260a62923a07aa7c9e3c752d84.
//
// Solidity: event SignAddressUpdated(address indexed operator, address indexed signAddress)
func (_Committee *CommitteeFilterer) FilterSignAddressUpdated(opts *bind.FilterOpts, operator []common.Address, signAddress []common.Address) (*CommitteeSignAddressUpdatedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var signAddressRule []interface{}
	for _, signAddressItem := range signAddress {
		signAddressRule = append(signAddressRule, signAddressItem)
	}

	logs, sub, err := _Committee.contract.FilterLogs(opts, "SignAddressUpdated", operatorRule, signAddressRule)
	if err != nil {
		return nil, err
	}
	return &CommitteeSignAddressUpdatedIterator{contract: _Committee.contract, event: "SignAddressUpdated", logs: logs, sub: sub}, nil
}

// WatchSignAddressUpdated is a free log subscription operation binding the contract event 0xf29351472086a2d8b1af521f96d65142d14518260a62923a07aa7c9e3c752d84.
//
// Solidity: event SignAddressUpdated(address indexed operator, address indexed signAddress)
func (_Committee *CommitteeFilterer) WatchSignAddressUpdated(opts *bind.WatchOpts, sink chan<- *CommitteeSignAddressUpdated, operator []common.Address, signAddress []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var signAddressRule []interface{}
	for _, signAddressItem := range signAddress {
		signAddressRule = append(signAddressRule, signAddressItem)
	}

	logs, sub, err := _Committee.contract.WatchLogs(opts, "SignAddressUpdated", operatorRule, signAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeSignAddressUpdated)
				if err := _Committee.contract.UnpackLog(event, "SignAddressUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSignAddressUpdated is a log parse operation binding the contract event 0xf29351472086a2d8b1af521f96d65142d14518260a62923a07aa7c9e3c752d84.
//
// Solidity: event SignAddressUpdated(address indexed operator, address indexed signAddress)
func (_Committee *CommitteeFilterer) ParseSignAddressUpdated(log types.Log) (*CommitteeSignAddressUpdated, error) {
	event := new(CommitteeSignAddressUpdated)
	if err := _Committee.contract.UnpackLog(event, "SignAddressUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeUpdateCommitteeIterator is returned from FilterUpdateCommittee and is used to iterate over the raw logs and unpacked data for UpdateCommittee events raised by the Committee contract.
type CommitteeUpdateCommitteeIterator struct {
	Event *CommitteeUpdateCommittee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeUpdateCommitteeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeUpdateCommittee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeUpdateCommittee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeUpdateCommitteeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeUpdateCommitteeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeUpdateCommittee represents a UpdateCommittee event raised by the Committee contract.
type CommitteeUpdateCommittee struct {
	ChainID     *big.Int
	EpochNumber *big.Int
	Current     [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdateCommittee is a free log retrieval operation binding the contract event 0x0762b282466177911d330a0c27e7de4e70f0c930671f2080b7cf2dcb3b100f95.
//
// Solidity: event UpdateCommittee(uint256 indexed chainID, uint256 indexed epochNumber, bytes32 current)
func (_Committee *CommitteeFilterer) FilterUpdateCommittee(opts *bind.FilterOpts, chainID []*big.Int, epochNumber []*big.Int) (*CommitteeUpdateCommitteeIterator, error) {

	var chainIDRule []interface{}
	for _, chainIDItem := range chainID {
		chainIDRule = append(chainIDRule, chainIDItem)
	}
	var epochNumberRule []interface{}
	for _, epochNumberItem := range epochNumber {
		epochNumberRule = append(epochNumberRule, epochNumberItem)
	}

	logs, sub, err := _Committee.contract.FilterLogs(opts, "UpdateCommittee", chainIDRule, epochNumberRule)
	if err != nil {
		return nil, err
	}
	return &CommitteeUpdateCommitteeIterator{contract: _Committee.contract, event: "UpdateCommittee", logs: logs, sub: sub}, nil
}

// WatchUpdateCommittee is a free log subscription operation binding the contract event 0x0762b282466177911d330a0c27e7de4e70f0c930671f2080b7cf2dcb3b100f95.
//
// Solidity: event UpdateCommittee(uint256 indexed chainID, uint256 indexed epochNumber, bytes32 current)
func (_Committee *CommitteeFilterer) WatchUpdateCommittee(opts *bind.WatchOpts, sink chan<- *CommitteeUpdateCommittee, chainID []*big.Int, epochNumber []*big.Int) (event.Subscription, error) {

	var chainIDRule []interface{}
	for _, chainIDItem := range chainID {
		chainIDRule = append(chainIDRule, chainIDItem)
	}
	var epochNumberRule []interface{}
	for _, epochNumberItem := range epochNumber {
		epochNumberRule = append(epochNumberRule, epochNumberItem)
	}

	logs, sub, err := _Committee.contract.WatchLogs(opts, "UpdateCommittee", chainIDRule, epochNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeUpdateCommittee)
				if err := _Committee.contract.UnpackLog(event, "UpdateCommittee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateCommittee is a log parse operation binding the contract event 0x0762b282466177911d330a0c27e7de4e70f0c930671f2080b7cf2dcb3b100f95.
//
// Solidity: event UpdateCommittee(uint256 indexed chainID, uint256 indexed epochNumber, bytes32 current)
func (_Committee *CommitteeFilterer) ParseUpdateCommittee(log types.Log) (*CommitteeUpdateCommittee, error) {
	event := new(CommitteeUpdateCommittee)
	if err := _Committee.contract.UnpackLog(event, "UpdateCommittee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeUpdateCommitteeParamsIterator is returned from FilterUpdateCommitteeParams and is used to iterate over the raw logs and unpacked data for UpdateCommitteeParams events raised by the Committee contract.
type CommitteeUpdateCommitteeParamsIterator struct {
	Event *CommitteeUpdateCommitteeParams // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeUpdateCommitteeParamsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeUpdateCommitteeParams)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeUpdateCommitteeParams)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeUpdateCommitteeParamsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeUpdateCommitteeParamsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeUpdateCommitteeParams represents a UpdateCommitteeParams event raised by the Committee contract.
type CommitteeUpdateCommitteeParams struct {
	ChainID        *big.Int
	QuorumNumber   uint8
	L1Bias         *big.Int
	GenesisBlock   *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
	MinWeight      *big.Int
	MaxWeight      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpdateCommitteeParams is a free log retrieval operation binding the contract event 0xc0f5fe53277733159fe7a739f75b98e959a28a0859db2c46e04a5f4820b96400.
//
// Solidity: event UpdateCommitteeParams(uint256 indexed chainID, uint8 indexed quorumNumber, int256 l1Bias, uint256 genesisBlock, uint256 duration, uint256 freezeDuration, uint96 minWeight, uint96 maxWeight)
func (_Committee *CommitteeFilterer) FilterUpdateCommitteeParams(opts *bind.FilterOpts, chainID []*big.Int, quorumNumber []uint8) (*CommitteeUpdateCommitteeParamsIterator, error) {

	var chainIDRule []interface{}
	for _, chainIDItem := range chainID {
		chainIDRule = append(chainIDRule, chainIDItem)
	}
	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _Committee.contract.FilterLogs(opts, "UpdateCommitteeParams", chainIDRule, quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &CommitteeUpdateCommitteeParamsIterator{contract: _Committee.contract, event: "UpdateCommitteeParams", logs: logs, sub: sub}, nil
}

// WatchUpdateCommitteeParams is a free log subscription operation binding the contract event 0xc0f5fe53277733159fe7a739f75b98e959a28a0859db2c46e04a5f4820b96400.
//
// Solidity: event UpdateCommitteeParams(uint256 indexed chainID, uint8 indexed quorumNumber, int256 l1Bias, uint256 genesisBlock, uint256 duration, uint256 freezeDuration, uint96 minWeight, uint96 maxWeight)
func (_Committee *CommitteeFilterer) WatchUpdateCommitteeParams(opts *bind.WatchOpts, sink chan<- *CommitteeUpdateCommitteeParams, chainID []*big.Int, quorumNumber []uint8) (event.Subscription, error) {

	var chainIDRule []interface{}
	for _, chainIDItem := range chainID {
		chainIDRule = append(chainIDRule, chainIDItem)
	}
	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _Committee.contract.WatchLogs(opts, "UpdateCommitteeParams", chainIDRule, quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeUpdateCommitteeParams)
				if err := _Committee.contract.UnpackLog(event, "UpdateCommitteeParams", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateCommitteeParams is a log parse operation binding the contract event 0xc0f5fe53277733159fe7a739f75b98e959a28a0859db2c46e04a5f4820b96400.
//
// Solidity: event UpdateCommitteeParams(uint256 indexed chainID, uint8 indexed quorumNumber, int256 l1Bias, uint256 genesisBlock, uint256 duration, uint256 freezeDuration, uint96 minWeight, uint96 maxWeight)
func (_Committee *CommitteeFilterer) ParseUpdateCommitteeParams(log types.Log) (*CommitteeUpdateCommitteeParams, error) {
	event := new(CommitteeUpdateCommitteeParams)
	if err := _Committee.contract.UnpackLog(event, "UpdateCommitteeParams", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
