syntax = "proto3";

package network.v1;

import "sequencer/v1/block.proto";

option go_package = "github.com/Lagrange-Labs/lagrange-node/server/types";

// NetworkService is the service for the attestation network
service NetworkService {
    // JoinNetwork is the rpc endpoint for joining the network
    rpc JoinNetwork(JoinNetworkRequest) returns (JoinNetworkResponse);
    // GetBatch is the rpc endpoint for getting the given block batch
    rpc GetBatch(GetBatchRequest) returns (GetBatchResponse);
    // CommitBatch is the rpc endpoint for committing the given block batch with signature at the client node
    rpc CommitBatch(CommitBatchRequest) returns (stream CommitBatchResponse);
    // GetBlock is the rpc endpoint for getting the given block
    rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);
}

// JoinNetworkRequest is the request to join the network
message JoinNetworkRequest {
    string public_key = 1;
    string stake_address = 2;
    string signature = 3;
}

// JoinNetworkResponse is the response for joining the network
message JoinNetworkResponse {
    string token = 1;
    string message = 2;
}

// GetBatchRequest is the request to get the given block batch
message GetBatchRequest {
    uint64 block_number = 1;
    string stake_address = 2;
    string token = 3;
}

// GetBlockResponse is the response for getting the given block batch
message GetBatchResponse {
    repeated sequencer.v1.Block batch = 1;
}

// CommitBatchRequest is the request to commit the signature
message CommitBatchRequest {
    repeated sequencer.v1.BlsSignature bls_signatures = 1;
    string stake_address = 2;
    string token = 3;
}

// CommitBatchResponse is the response for uploading the signature for the given block batch
message CommitBatchResponse {
    bool result = 1;
}

// GetBlockRequest is the request to get the given block
message GetBlockRequest {
    uint64 block_number = 1;
    string stake_address = 2;
    string token = 3;
}

// GetBlockResponse is the response for getting the given block
message GetBlockResponse {
    sequencer.v1.Block block = 1;
}
