// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: sequencer/v2/batch.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BlockHeader is the block header structure
type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash   string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_v2_batch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_v2_batch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_sequencer_v2_batch_proto_rawDescGZIP(), []int{0}
}

func (x *BlockHeader) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BlockHeader) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

// BatchHeader is the header for the given batch of the specific chain
type BatchHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchNumber       uint64         `protobuf:"varint,1,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
	ChainId           uint32         `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	L2Blocks          []*BlockHeader `protobuf:"bytes,3,rep,name=l2_blocks,json=l2Blocks,proto3" json:"l2_blocks,omitempty"`
	L1BlockNumber     uint64         `protobuf:"varint,4,opt,name=l1_block_number,json=l1BlockNumber,proto3" json:"l1_block_number,omitempty"`
	L1TxHash          string         `protobuf:"bytes,5,opt,name=l1_tx_hash,json=l1TxHash,proto3" json:"l1_tx_hash,omitempty"`
	L1TxIndex         uint32         `protobuf:"varint,6,opt,name=l1_tx_index,json=l1TxIndex,proto3" json:"l1_tx_index,omitempty"`
	L2FromBlockNumber uint64         `protobuf:"varint,7,opt,name=l2_from_block_number,json=l2FromBlockNumber,proto3" json:"l2_from_block_number,omitempty"`
	L2ToBlockNumber   uint64         `protobuf:"varint,8,opt,name=l2_to_block_number,json=l2ToBlockNumber,proto3" json:"l2_to_block_number,omitempty"`
}

func (x *BatchHeader) Reset() {
	*x = BatchHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_v2_batch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchHeader) ProtoMessage() {}

func (x *BatchHeader) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_v2_batch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchHeader.ProtoReflect.Descriptor instead.
func (*BatchHeader) Descriptor() ([]byte, []int) {
	return file_sequencer_v2_batch_proto_rawDescGZIP(), []int{1}
}

func (x *BatchHeader) GetBatchNumber() uint64 {
	if x != nil {
		return x.BatchNumber
	}
	return 0
}

func (x *BatchHeader) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *BatchHeader) GetL2Blocks() []*BlockHeader {
	if x != nil {
		return x.L2Blocks
	}
	return nil
}

func (x *BatchHeader) GetL1BlockNumber() uint64 {
	if x != nil {
		return x.L1BlockNumber
	}
	return 0
}

func (x *BatchHeader) GetL1TxHash() string {
	if x != nil {
		return x.L1TxHash
	}
	return ""
}

func (x *BatchHeader) GetL1TxIndex() uint32 {
	if x != nil {
		return x.L1TxIndex
	}
	return 0
}

func (x *BatchHeader) GetL2FromBlockNumber() uint64 {
	if x != nil {
		return x.L2FromBlockNumber
	}
	return 0
}

func (x *BatchHeader) GetL2ToBlockNumber() uint64 {
	if x != nil {
		return x.L2ToBlockNumber
	}
	return 0
}

// CommitteeHeader is the header for the given committee
type CommitteeHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentCommittee string `protobuf:"bytes,1,opt,name=current_committee,json=currentCommittee,proto3" json:"current_committee,omitempty"`
	NextCommittee    string `protobuf:"bytes,2,opt,name=next_committee,json=nextCommittee,proto3" json:"next_committee,omitempty"`
	TotalVotingPower uint64 `protobuf:"varint,3,opt,name=total_voting_power,json=totalVotingPower,proto3" json:"total_voting_power,omitempty"`
}

func (x *CommitteeHeader) Reset() {
	*x = CommitteeHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_v2_batch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitteeHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitteeHeader) ProtoMessage() {}

func (x *CommitteeHeader) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_v2_batch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitteeHeader.ProtoReflect.Descriptor instead.
func (*CommitteeHeader) Descriptor() ([]byte, []int) {
	return file_sequencer_v2_batch_proto_rawDescGZIP(), []int{2}
}

func (x *CommitteeHeader) GetCurrentCommittee() string {
	if x != nil {
		return x.CurrentCommittee
	}
	return ""
}

func (x *CommitteeHeader) GetNextCommittee() string {
	if x != nil {
		return x.NextCommittee
	}
	return ""
}

func (x *CommitteeHeader) GetTotalVotingPower() uint64 {
	if x != nil {
		return x.TotalVotingPower
	}
	return 0
}

// Batch is the batch body structure
type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchHeader       *BatchHeader     `protobuf:"bytes,1,opt,name=batch_header,json=batchHeader,proto3" json:"batch_header,omitempty"`
	CommitteeHeader   *CommitteeHeader `protobuf:"bytes,2,opt,name=committee_header,json=committeeHeader,proto3" json:"committee_header,omitempty"`
	ProposerPubKey    string           `protobuf:"bytes,3,opt,name=proposer_pub_key,json=proposerPubKey,proto3" json:"proposer_pub_key,omitempty"`
	ProposerSignature string           `protobuf:"bytes,4,opt,name=proposer_signature,json=proposerSignature,proto3" json:"proposer_signature,omitempty"`
	PubKeys           []string         `protobuf:"bytes,5,rep,name=pub_keys,json=pubKeys,proto3" json:"pub_keys,omitempty"`
	Operators         []string         `protobuf:"bytes,6,rep,name=operators,proto3" json:"operators,omitempty"`
	AggSignature      string           `protobuf:"bytes,7,opt,name=agg_signature,json=aggSignature,proto3" json:"agg_signature,omitempty"`
	// meta data
	SequencedTime string `protobuf:"bytes,8,opt,name=sequenced_time,json=sequencedTime,proto3" json:"sequenced_time,omitempty"`
	FinalizedTime string `protobuf:"bytes,9,opt,name=finalized_time,json=finalizedTime,proto3" json:"finalized_time,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_v2_batch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_v2_batch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_sequencer_v2_batch_proto_rawDescGZIP(), []int{3}
}

func (x *Batch) GetBatchHeader() *BatchHeader {
	if x != nil {
		return x.BatchHeader
	}
	return nil
}

func (x *Batch) GetCommitteeHeader() *CommitteeHeader {
	if x != nil {
		return x.CommitteeHeader
	}
	return nil
}

func (x *Batch) GetProposerPubKey() string {
	if x != nil {
		return x.ProposerPubKey
	}
	return ""
}

func (x *Batch) GetProposerSignature() string {
	if x != nil {
		return x.ProposerSignature
	}
	return ""
}

func (x *Batch) GetPubKeys() []string {
	if x != nil {
		return x.PubKeys
	}
	return nil
}

func (x *Batch) GetOperators() []string {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *Batch) GetAggSignature() string {
	if x != nil {
		return x.AggSignature
	}
	return ""
}

func (x *Batch) GetSequencedTime() string {
	if x != nil {
		return x.SequencedTime
	}
	return ""
}

func (x *Batch) GetFinalizedTime() string {
	if x != nil {
		return x.FinalizedTime
	}
	return ""
}

// BlsSignature is the BLS signature of the given batch
type BlsSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchHeader     *BatchHeader     `protobuf:"bytes,1,opt,name=batch_header,json=batchHeader,proto3" json:"batch_header,omitempty"`
	CommitteeHeader *CommitteeHeader `protobuf:"bytes,2,opt,name=committee_header,json=committeeHeader,proto3" json:"committee_header,omitempty"`
	BlsSignature    string           `protobuf:"bytes,3,opt,name=bls_signature,json=blsSignature,proto3" json:"bls_signature,omitempty"`
	EcdsaSignature  string           `protobuf:"bytes,4,opt,name=ecdsa_signature,json=ecdsaSignature,proto3" json:"ecdsa_signature,omitempty"`
}

func (x *BlsSignature) Reset() {
	*x = BlsSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencer_v2_batch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlsSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlsSignature) ProtoMessage() {}

func (x *BlsSignature) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_v2_batch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlsSignature.ProtoReflect.Descriptor instead.
func (*BlsSignature) Descriptor() ([]byte, []int) {
	return file_sequencer_v2_batch_proto_rawDescGZIP(), []int{4}
}

func (x *BlsSignature) GetBatchHeader() *BatchHeader {
	if x != nil {
		return x.BatchHeader
	}
	return nil
}

func (x *BlsSignature) GetCommitteeHeader() *CommitteeHeader {
	if x != nil {
		return x.CommitteeHeader
	}
	return nil
}

func (x *BlsSignature) GetBlsSignature() string {
	if x != nil {
		return x.BlsSignature
	}
	return ""
}

func (x *BlsSignature) GetEcdsaSignature() string {
	if x != nil {
		return x.EcdsaSignature
	}
	return ""
}

var File_sequencer_v2_batch_proto protoreflect.FileDescriptor

var file_sequencer_v2_batch_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x22, 0x4f, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc7, 0x02, 0x0a, 0x0b, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x6c, 0x32, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x08, 0x6c, 0x32, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x31, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x31, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x6c, 0x31, 0x5f, 0x74, 0x78,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x31, 0x54,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x31, 0x5f, 0x74, 0x78, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x31, 0x54, 0x78,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x32, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x32, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x32, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x6c, 0x32, 0x54, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x94, 0x03, 0x0a, 0x05, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xe4, 0x01, 0x0a, 0x0c, 0x42, 0x6c, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x73,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x6c, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x65, 0x63, 0x64, 0x73, 0x61, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x4c,
	0x61, 0x62, 0x73, 0x2f, 0x6c, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x6e, 0x6f, 0x64,
	0x65, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sequencer_v2_batch_proto_rawDescOnce sync.Once
	file_sequencer_v2_batch_proto_rawDescData = file_sequencer_v2_batch_proto_rawDesc
)

func file_sequencer_v2_batch_proto_rawDescGZIP() []byte {
	file_sequencer_v2_batch_proto_rawDescOnce.Do(func() {
		file_sequencer_v2_batch_proto_rawDescData = protoimpl.X.CompressGZIP(file_sequencer_v2_batch_proto_rawDescData)
	})
	return file_sequencer_v2_batch_proto_rawDescData
}

var file_sequencer_v2_batch_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_sequencer_v2_batch_proto_goTypes = []any{
	(*BlockHeader)(nil),     // 0: sequencer.v2.BlockHeader
	(*BatchHeader)(nil),     // 1: sequencer.v2.BatchHeader
	(*CommitteeHeader)(nil), // 2: sequencer.v2.CommitteeHeader
	(*Batch)(nil),           // 3: sequencer.v2.Batch
	(*BlsSignature)(nil),    // 4: sequencer.v2.BlsSignature
}
var file_sequencer_v2_batch_proto_depIdxs = []int32{
	0, // 0: sequencer.v2.BatchHeader.l2_blocks:type_name -> sequencer.v2.BlockHeader
	1, // 1: sequencer.v2.Batch.batch_header:type_name -> sequencer.v2.BatchHeader
	2, // 2: sequencer.v2.Batch.committee_header:type_name -> sequencer.v2.CommitteeHeader
	1, // 3: sequencer.v2.BlsSignature.batch_header:type_name -> sequencer.v2.BatchHeader
	2, // 4: sequencer.v2.BlsSignature.committee_header:type_name -> sequencer.v2.CommitteeHeader
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_sequencer_v2_batch_proto_init() }
func file_sequencer_v2_batch_proto_init() {
	if File_sequencer_v2_batch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sequencer_v2_batch_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_v2_batch_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BatchHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_v2_batch_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CommitteeHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_v2_batch_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencer_v2_batch_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BlsSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sequencer_v2_batch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sequencer_v2_batch_proto_goTypes,
		DependencyIndexes: file_sequencer_v2_batch_proto_depIdxs,
		MessageInfos:      file_sequencer_v2_batch_proto_msgTypes,
	}.Build()
	File_sequencer_v2_batch_proto = out.File
	file_sequencer_v2_batch_proto_rawDesc = nil
	file_sequencer_v2_batch_proto_goTypes = nil
	file_sequencer_v2_batch_proto_depIdxs = nil
}
