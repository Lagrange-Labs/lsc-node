// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: network/v1/network.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NetworkService_JoinNetwork_FullMethodName = "/network.v1.NetworkService/JoinNetwork"
	NetworkService_GetBatch_FullMethodName    = "/network.v1.NetworkService/GetBatch"
	NetworkService_CommitBatch_FullMethodName = "/network.v1.NetworkService/CommitBatch"
	NetworkService_GetBlock_FullMethodName    = "/network.v1.NetworkService/GetBlock"
)

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NetworkService is the service for the attestation network
type NetworkServiceClient interface {
	// JoinNetwork is the rpc endpoint for joining the network
	JoinNetwork(ctx context.Context, in *JoinNetworkRequest, opts ...grpc.CallOption) (*JoinNetworkResponse, error)
	// GetBatch is the rpc endpoint for getting the given block batch
	GetBatch(ctx context.Context, in *GetBatchRequest, opts ...grpc.CallOption) (*GetBatchResponse, error)
	// CommitBatch is the rpc endpoint for committing the given block batch with signature at the client node
	CommitBatch(ctx context.Context, in *CommitBatchRequest, opts ...grpc.CallOption) (NetworkService_CommitBatchClient, error)
	// GetBlock is the rpc endpoint for getting the given block
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
}

type networkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceClient(cc grpc.ClientConnInterface) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) JoinNetwork(ctx context.Context, in *JoinNetworkRequest, opts ...grpc.CallOption) (*JoinNetworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinNetworkResponse)
	err := c.cc.Invoke(ctx, NetworkService_JoinNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetBatch(ctx context.Context, in *GetBatchRequest, opts ...grpc.CallOption) (*GetBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBatchResponse)
	err := c.cc.Invoke(ctx, NetworkService_GetBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) CommitBatch(ctx context.Context, in *CommitBatchRequest, opts ...grpc.CallOption) (NetworkService_CommitBatchClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NetworkService_ServiceDesc.Streams[0], NetworkService_CommitBatch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceCommitBatchClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkService_CommitBatchClient interface {
	Recv() (*CommitBatchResponse, error)
	grpc.ClientStream
}

type networkServiceCommitBatchClient struct {
	grpc.ClientStream
}

func (x *networkServiceCommitBatchClient) Recv() (*CommitBatchResponse, error) {
	m := new(CommitBatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, NetworkService_GetBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
// All implementations must embed UnimplementedNetworkServiceServer
// for forward compatibility
//
// NetworkService is the service for the attestation network
type NetworkServiceServer interface {
	// JoinNetwork is the rpc endpoint for joining the network
	JoinNetwork(context.Context, *JoinNetworkRequest) (*JoinNetworkResponse, error)
	// GetBatch is the rpc endpoint for getting the given block batch
	GetBatch(context.Context, *GetBatchRequest) (*GetBatchResponse, error)
	// CommitBatch is the rpc endpoint for committing the given block batch with signature at the client node
	CommitBatch(*CommitBatchRequest, NetworkService_CommitBatchServer) error
	// GetBlock is the rpc endpoint for getting the given block
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	mustEmbedUnimplementedNetworkServiceServer()
}

// UnimplementedNetworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (UnimplementedNetworkServiceServer) JoinNetwork(context.Context, *JoinNetworkRequest) (*JoinNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinNetwork not implemented")
}
func (UnimplementedNetworkServiceServer) GetBatch(context.Context, *GetBatchRequest) (*GetBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatch not implemented")
}
func (UnimplementedNetworkServiceServer) CommitBatch(*CommitBatchRequest, NetworkService_CommitBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method CommitBatch not implemented")
}
func (UnimplementedNetworkServiceServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedNetworkServiceServer) mustEmbedUnimplementedNetworkServiceServer() {}

// UnsafeNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServiceServer will
// result in compilation errors.
type UnsafeNetworkServiceServer interface {
	mustEmbedUnimplementedNetworkServiceServer()
}

func RegisterNetworkServiceServer(s grpc.ServiceRegistrar, srv NetworkServiceServer) {
	s.RegisterService(&NetworkService_ServiceDesc, srv)
}

func _NetworkService_JoinNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).JoinNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_JoinNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).JoinNetwork(ctx, req.(*JoinNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetBatch(ctx, req.(*GetBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_CommitBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommitBatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceServer).CommitBatch(m, &networkServiceCommitBatchServer{ServerStream: stream})
}

type NetworkService_CommitBatchServer interface {
	Send(*CommitBatchResponse) error
	grpc.ServerStream
}

type networkServiceCommitBatchServer struct {
	grpc.ServerStream
}

func (x *networkServiceCommitBatchServer) Send(m *CommitBatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkService_ServiceDesc is the grpc.ServiceDesc for NetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.v1.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinNetwork",
			Handler:    _NetworkService_JoinNetwork_Handler,
		},
		{
			MethodName: "GetBatch",
			Handler:    _NetworkService_GetBatch_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _NetworkService_GetBlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommitBatch",
			Handler:       _NetworkService_CommitBatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network/v1/network.proto",
}
